"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[497],{5573:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=s(5893),o=s(1151);const i={},r="Server Access Service",c={id:"best-practice/work-with-servless",title:"Server Access Service",description:"Serverless enables operations to be spent on demand and billed on a case-by-case basis, while the self-deployed, lightly quantified features of functions require many \u201cglue codes\u201d when actual operations get down.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/best-practice/03-work-with-servless.md",sourceDirName:"best-practice",slug:"/best-practice/work-with-servless",permalink:"/en/docs/best-practice/work-with-servless",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Organize Long Tasks",permalink:"/en/docs/best-practice/invoke-long-running-jobs"},next:{title:"Angular model",permalink:"/en/docs/best-practice/work-with-llms"}},a={},l=[{value:"Flow Control",id:"flow-control",level:2},{value:"Server Gateway",id:"server-gateway",level:2},{value:"OpenFaas",id:"openfaas",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"server-access-service",children:"Server Access Service"}),"\n",(0,t.jsx)(n.p,{children:"Serverless enables operations to be spent on demand and billed on a case-by-case basis, while the self-deployed, lightly quantified features of functions require many \u201cglue codes\u201d when actual operations get down."}),"\n",(0,t.jsx)(n.p,{children:'Rill Flow supports common process control statements and can serve as "glue codes" for low coding Serverlessness.'}),"\n",(0,t.jsx)(n.h2,{id:"flow-control",children:"Flow Control"}),"\n",(0,t.jsxs)(n.p,{children:["Process control nodes that support conditions, loops, jumps, etc. in Rill Flows. Use process control nodes to implement basic business control album and expression and reference",(0,t.jsx)(n.a,{href:"/en/docs/user-guide/defination/control",children:"\u6d41\u7a0b\u63a7\u5236"})]}),"\n",(0,t.jsx)(n.h2,{id:"server-gateway",children:"Server Gateway"}),"\n",(0,t.jsx)(n.p,{children:"Rill Flow organizes cloud services, including cloud functions, in the form of workflow to support process control nodes of conditionality, loop and jumps.Tasks are forwarded via HTTP request to a Serverless Gateway, implementing Serverless Business Integration.For further information, reference may be made to the [HTTP dispatcher](../user-guide/03-defination/02-task-and-dispatcher.md#http-protocol dispatcher)."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["You can also implement the ",(0,t.jsx)(n.code,{children:"Serverless"})," special dispatcher by developing custom plugin details for",(0,t.jsx)(n.a,{href:"/en/docs/develop/plugin/create-plugin",children:"\u521b\u5efa\u63d2\u4ef6"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Consider text-generated videos, where text acquisition, text split, text-color, text-pairing, text-matching, calibration and calibration services are a separate function. Rill Flow can organize functions into line with project needs and reduce developers to write unnecessary "glue codes".Product demand iterations can be quickly developed by modifying the DAG graphs based on different needs over time.'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"image",src:s(4804).Z+"",width:"1093",height:"281"})}),"\n",(0,t.jsx)(n.h3,{id:"openfaas",children:"OpenFaas"}),"\n",(0,t.jsxs)(n.p,{children:["OpenFaas gateway's ",(0,t.jsx)(n.code,{children:"namespace"}),", ",(0,t.jsx)(n.code,{children:"service"})," and ",(0,t.jsx)(n.code,{children:"port"})," can be confirmed by deploying Yaml to ",(0,t.jsx)(n.a,{href:"https://docs.openfaas.com/employment/kubernetes/",children:"OpenFaas"}),". When defining a task, the task can be bound to a different ",(0,t.jsx)(n.code,{children:"Serverless"})," function via the ",(0,t.jsx)(n.code,{children:"ResourceName"})," field."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The OpenFaas function synchronizes calls to ",(0,t.jsx)(n.code,{children:"ResourceName"})," like\uff1a"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"http://{service}.{namespace}.svc.cluster.local:{service-port}/function/{function-name}/{function-uri}"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"images",src:s(6634).Z+"",width:"583",height:"134"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The OpenFaas function asynchronously calls ",(0,t.jsx)(n.code,{children:"ResourceName"})," like\uff1a"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"http://{service}.{namespace}.svc.cluster.local:{service-port}/async-function/{function-name}/{function-uri}"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"images",src:s(8113).Z+"",width:"723",height:"400"}),")"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8113:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/openfaas-async-1b1bc8454d946223d6df00f05b34fa40.svg"},6634:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/openfaas-sync-d503c98d05024e66497f02ca1aee1331.svg"},4804:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/text_to_video-fdb00f95f54ec8503e9fddf156e273f3.svg"},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>r});var t=s(7294);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);